__author__ = 'Lei Chen'

'''
Write a program to find the n-th ugly number.
Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.
Note that 1 is typically treated as an ugly number.
'''

import heapq
from collections import deque
class Solution(object):
    def nthUglyNumber(self, n):
        table=[0,1,2,3,4,5,6,8,9,10,12,15,16,18,20,24,25,27,30,32,36,40,45,48,50,54,60,64,
        72,75,80,81,90,96,100,108,120,125,128,135,144,150,160,162,180,192,200,216,225,240,
        243,250,256,270,288,300,320,324,360,375,384,400,405,432,450,480,486,500,512,540,576,
        600,625,640,648,675,720,729,750,768,800,810,864,900,960,972,1000,1024,1080,1125,1152,
        1200,1215,1250,1280,1296,1350,1440,1458,1500,1536,1600,1620,1728,1800,1875,1920,1944,
        2000,2025,2048,2160,2187,2250,2304,2400,2430,2500,2560,2592,2700,2880,2916,3000,3072,
        3125,3200,3240,3375,3456,3600,3645,3750,3840,3888,4000,4050,4096,4320,4374,4500,4608,
        4800,4860,5000,5120,5184,5400,5625,5760,5832,6000,6075,6144,6250,6400,6480,6561,6750,
        6912,7200,7290,7500,7680,7776,8000,8100,8192,8640,8748,9000,9216,9375,9600,9720,10000,
        10125,10240,10368,10800,10935,11250,11520,11664,12000,12150,12288,12500,12800,12960,
        13122,13500,13824,14400,14580,15000,15360,15552,15625,16000,16200,16384,16875,17280,
        17496,18000,18225,18432,18750,19200,19440,19683,20000,20250,20480,20736,21600,21870,
        22500,23040,23328,24000,24300,24576,25000,25600,25920,26244,27000,27648,28125,28800,
        29160,30000,30375,30720,31104,31250,32000,32400,32768,32805,33750,34560,34992,36000,
        36450,36864,37500,38400,38880,39366,40000,40500,40960,41472,43200,43740,45000,46080,
        46656,46875,48000,48600,49152,50000,50625,51200,51840,52488,54000,54675,55296,56250,
        57600,58320,59049,60000,60750,61440,62208,62500,64000,64800,65536,65610,67500,69120,
        69984,72000,72900,73728,75000,76800,77760,78125,78732,80000,81000,81920,82944,84375,
        86400,87480,90000,91125,92160,93312,93750,96000,97200,98304,98415,100000,101250,102400,
        103680,104976,108000,109350,110592,112500,115200,116640,118098,120000,121500,122880,
        124416,125000,128000,129600,131072,131220,135000,138240,139968,140625,144000,145800,
        147456,150000,151875,153600,155520,156250,157464,160000,162000,163840,164025,165888,
        168750,172800,174960,177147,180000,182250,184320,186624,187500,192000,194400,196608,
        196830,200000,202500,204800,207360,209952,216000,218700,221184,225000,230400,233280,
        234375,236196,240000,243000,245760,248832,250000,253125,256000,259200,262144,262440,
        270000,273375,276480,279936,281250,288000,291600,294912,295245,300000,303750,307200,
        311040,312500,314928,320000,324000,327680,328050,331776,337500,345600,349920,354294,
        360000,364500,368640,373248,375000,384000,388800,390625,393216,393660,400000,405000,
        409600,414720,419904,421875,432000,437400,442368,450000,455625,460800,466560,468750,
        472392,480000,486000,491520,492075,497664,500000,506250,512000,518400,524288,524880,
        531441,540000,546750,552960,559872,562500,576000,583200,589824,590490,600000,607500,
        614400,622080,625000,629856,640000,648000,655360,656100,663552,675000,691200,699840,
        703125,708588,720000,729000,737280,746496,750000,759375,768000,777600,781250,786432,
        787320,800000,810000,819200,820125,829440,839808,843750,864000,874800,884736,885735,
        900000,911250,921600,933120,937500,944784,960000,972000,983040,984150,995328,1000000]
        if n <= 507: return table[n]

        next = 0
        q2=deque([1012500, 1024000, 1036800, 1048576, 1049760, 1062882, 1080000, 1093500, 1105920,
        1119744, 1125000, 1152000, 1166400, 1179648, 1180980, 1200000, 1215000, 1228800, 1244160,
        1250000, 1259712, 1280000, 1296000, 1310720, 1312200, 1327104, 1350000, 1382400, 1399680,
        1406250, 1417176, 1440000, 1458000, 1474560, 1492992, 1500000, 1518750, 1536000, 1555200,
        1562500, 1572864, 1574640, 1600000, 1620000, 1638400, 1640250, 1658880, 1679616, 1687500,
        1728000, 1749600, 1769472, 1771470, 1800000, 1822500, 1843200, 1866240, 1875000, 1889568,
        1920000, 1944000, 1966080, 1968300, 1990656, 2000000])
        q3=deque([1012500, 1036800, 1049760, 1062882, 1080000, 1093500, 1105920, 1119744, 1125000,
        1152000, 1166400, 1171875, 1179648, 1180980, 1200000, 1215000, 1228800, 1244160, 1259712,
        1265625, 1296000, 1312200, 1327104, 1350000, 1366875, 1382400, 1399680, 1406250, 1417176,
        1440000, 1458000, 1474560, 1476225, 1492992, 1500000, 1518750, 1536000, 1555200, 1572864,
        1574640, 1594323, 1620000, 1640250, 1658880, 1679616, 1687500, 1728000, 1749600, 1769472,
        1771470, 1800000, 1822500, 1843200, 1866240, 1875000, 1889568, 1920000, 1944000, 1966080,
        1968300, 1990656, 2025000, 2073600, 2099520, 2109375, 2125764, 2160000, 2187000, 2211840,
        2239488, 2250000, 2278125, 2304000, 2332800, 2343750, 2359296, 2361960, 2400000, 2430000,
        2457600, 2460375, 2488320, 2519424, 2531250, 2592000, 2624400, 2654208, 2657205, 2700000,
        2733750, 2764800, 2799360, 2812500, 2834352, 2880000, 2916000, 2949120, 2952450, 2985984,
        3000000])
        q5=deque([1012500, 1024000, 1036800, 1049760, 1080000, 1093500, 1105920, 1125000, 1152000,
        1166400, 1171875, 1180980, 1200000, 1215000, 1228800, 1244160, 1250000, 1265625, 1280000,
        1296000, 1310720, 1312200, 1350000, 1366875, 1382400, 1399680, 1406250, 1440000, 1458000,
        1474560, 1476225, 1500000, 1518750, 1536000, 1555200, 1562500, 1574640, 1600000, 1620000,
        1638400, 1640250, 1658880, 1687500, 1728000, 1749600, 1771470, 1800000, 1822500, 1843200,
        1866240, 1875000, 1920000, 1944000, 1953125, 1966080, 1968300, 2000000, 2025000, 2048000,
        2073600, 2099520, 2109375, 2160000, 2187000, 2211840, 2250000, 2278125, 2304000, 2332800,
        2343750, 2361960, 2400000, 2430000, 2457600, 2460375, 2488320, 2500000, 2531250, 2560000,
        2592000, 2621440, 2624400, 2657205, 2700000, 2733750, 2764800, 2799360, 2812500, 2880000,
        2916000, 2949120, 2952450, 3000000, 3037500, 3072000, 3110400, 3125000, 3149280, 3200000,
        3240000, 3276800, 3280500, 3317760, 3375000, 3456000, 3499200, 3515625, 3542940, 3600000,
        3645000, 3686400, 3732480, 3750000, 3796875, 3840000, 3888000, 3906250, 3932160, 3936600,
        4000000, 4050000, 4096000, 4100625, 4147200, 4199040, 4218750, 4320000, 4374000, 4423680,
        4428675, 4500000, 4556250, 4608000, 4665600, 4687500, 4723920, 4800000, 4860000, 4915200,
        4920750, 4976640, 5000000])

        for i in range(507,n):
            next=min(q2[0],q3[0],q5[0])
            if next==q2[0]: q2.popleft()
            if next==q3[0]: q3.popleft()
            if next==q5[0]: q5.popleft()
            q2.append(next*2)
            q3.append(next*3)
            q5.append(next*5)
        return next

    def original(self,n):
        next = 0
        q2=deque([1])
        q3=deque([1])
        q5=deque([1])
        for i in range(n):
            next=min(q2[0],q3[0],q5[0])
            if next==q2[0]: q2.popleft()
            if next==q3[0]: q3.popleft()
            if next==q5[0]: q5.popleft()
            q2.append(next*2)
            q3.append(next*3)
            q5.append(next*5)
        # print(q2)
        # print(q3)
        # print(q5)

        return next

    def useSet(self,n):
        heap = [1]
        f = set(heap)
        m = None
        for i in range (n):
            m = heapq.heappop(heap)
            f.remove(m)
            for j in [2,3,5]:
                new = m * j
                if new not in f:
                    f.add(new)
                    heapq.heappush(heap, new)
        return m


s = Solution()
n = 500
print(s.nthUglyNumber(n))
print(s.original(n))
print(s.useSet(n))

